name: 📊 Export Modem Data to CSV

on:
  schedule:
    # Executar a cada 30 minutos
    - cron: '*/30 * * * *'
  workflow_dispatch: # Permite execução manual
    inputs:
      force_update:
        description: 'Forçar atualização mesmo sem mudanças'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - '.github/workflows/export-data.yml'

env:
  DATA_DIR: 'data'

jobs:
  export-data:
    name: 🚀 Export & Sync Data
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      records-count: ${{ steps.export.outputs.records-count }}
      file-size: ${{ steps.export.outputs.file-size }}
      export-status: ${{ steps.export.outputs.status }}
    
    steps:
    - name: 📂 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📁 Create directories
      run: mkdir -p ${{ env.DATA_DIR }}
        
    - name: 🚀 Generate and export data
      id: export
      run: |
        DATA_DIR="${{ env.DATA_DIR }}"
        FORCE_UPDATE="${{ github.event.inputs.force_update || 'false' }}"
        
        # Gerar dados de exemplo
        generate_data() {
          local today=$(date '+%Y-%m-%d')
          local timestamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          local num_records=$((RANDOM % 6 + 3))
          
          for ((i=1; i<=num_records; i++)); do
            local id=$(( $(date +%s) + i ))
            local modelos=("Motorola SB6141" "ARRIS SB8200" "Huawei EG8145V5" "Nokia G-1425G-B" "TP-Link Archer C80")
            local fabricantes=("Motorola" "ARRIS" "Huawei" "Nokia" "TP-Link")
            local idx=$((RANDOM % ${#modelos[@]}))
            local quantidade=$((RANDOM % 20 + 1))
            local obs="Gravação padrão"
            
            echo "$id,$today,${modelos[$idx]},${fabricantes[$idx]},$quantidade,$obs,$timestamp"
          done
        }
        
        # Ler dados existentes
        CSV_PATH="$DATA_DIR/modem-data.csv"
        EXISTING_DATA=""
        
        if [[ -f "$CSV_PATH" ]]; then
          EXISTING_DATA=$(tail -n +2 "$CSV_PATH" 2>/dev/null || true)
        fi
        
        # Gerar novos dados
        NEW_DATA=$(generate_data)
        
        # Combinar dados
        ALL_DATA=$(echo -e "${EXISTING_DATA}\n${NEW_DATA}" | tail -n 1000)
        
        # Criar CSV
        HEADERS="id,data,modelo,fabricante,quantidade,observacoes,timestamp"
        CSV_CONTENT=$(echo -e "${HEADERS}\n${ALL_DATA}")
        
        # Verificar mudanças
        HAS_CHANGES=false
        if [[ ! -f "$CSV_PATH" ]] || [[ "$(cat "$CSV_PATH")" != "$CSV_CONTENT" ]] || [[ "$FORCE_UPDATE" == "true" ]]; then
          HAS_CHANGES=true
        fi
        
        if [[ "$HAS_CHANGES" == "true" ]]; then
          # Salvar CSV
          echo "$CSV_CONTENT" > "$CSV_PATH"
          
          # Criar metadata simples
          RECORD_COUNT=$(echo "$CSV_CONTENT" | wc -l)
          RECORD_COUNT=$((RECORD_COUNT - 1))
          
          echo '{"lastUpdate":"'$(date -u '+%Y-%m-%dT%H:%M:%SZ')'","recordCount":'$RECORD_COUNT',"newRecordsAdded":'$(echo "$NEW_DATA" | wc -l)',"version":"3.0","source":"GitHub Actions Bash"}' > "$DATA_DIR/metadata.json"
          
          # Outputs
          echo "records-count=$RECORD_COUNT" >> $GITHUB_OUTPUT
          echo "file-size=$(echo "$CSV_CONTENT" | wc -c | awk '{printf "%.2f", $1/1024}')" >> $GITHUB_OUTPUT
          echo "status=updated" >> $GITHUB_OUTPUT
          
          echo "✅ Dados atualizados com sucesso"
        else
          echo "status=no-changes" >> $GITHUB_OUTPUT
          echo "ℹ️ Nenhuma mudança detectada"
        fi
        
    - name: 📈 Generate summary report
      if: always()
      run: |
        echo "## 📊 Export Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.export.outputs.export-status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Records**: ${{ steps.export.outputs.records-count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **File Size**: ${{ steps.export.outputs.file-size }} KB" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links Úteis" >> $GITHUB_STEP_SUMMARY
        echo "- [📄 CSV Atual](https://raw.githubusercontent.com/${{ github.repository }}/main/data/modem-data.csv)" >> $GITHUB_STEP_SUMMARY
        echo "- [📋 Metadata](https://raw.githubusercontent.com/${{ github.repository }}/main/data/metadata.json)" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔄 Commit and push changes
      if: steps.export.outputs.export-status == 'updated'
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions Bot"
        git config --local core.autocrlf false
        
        git add data/
        
        if git diff --staged --quiet; then
          echo "Nenhuma mudança para commit"
        else
          git commit -m "🔄 Dados atualizados automaticamente - Registros: ${{ steps.export.outputs.records-count }} - Workflow: #${{ github.run_number }} [skip ci]"
          git push
          echo "✅ Mudanças commitadas e enviadas"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 