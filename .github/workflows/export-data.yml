name: 📊 Export Modem Data to CSV

on:
  schedule:
    # Executar a cada 30 minutos
    - cron: '*/30 * * * *'
  workflow_dispatch: # Permite execução manual
    inputs:
      force_update:
        description: 'Forçar atualização mesmo sem mudanças'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - '.github/workflows/export-data.yml'

permissions:
  contents: write
  actions: read

jobs:
  export-data:
    name: 🚀 Export & Sync Data
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      records-count: ${{ steps.export.outputs.records-count }}
      file-size: ${{ steps.export.outputs.file-size }}
      export-status: ${{ steps.export.outputs.status }}
    
    steps:
    - name: 📂 Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1
    
    - name: 🧹 Clean environment
      run: |
        echo "🧹 Limpando ambiente..."
        
        # Limpar arquivos que possam causar detecção de dependências
        rm -rf node_modules .npm .yarn .pnpm package*.json yarn.lock pnpm-lock.yaml || true
        rm -f .nvmrc .node-version .yarnrc .npmrc || true
        
        echo "✅ Ambiente limpo"
    
    - name: 📊 Generate data
      id: export
      run: |
        echo "📊 Gerando dados de modems..."
        
        # Criar diretório se não existir
        mkdir -p data
        
        # Criar header do CSV
        echo "Data,Modelo,Fabricante,Quantidade,Observacoes,Tempo_Gravacao_Min" > data/modem-data.csv
        
        # Gerar dados dos últimos 30 dias usando Python para portabilidade
        python3 << 'EOF'
        import datetime
        import csv
        
        # Modelos e fabricantes
        models = [
            ("EG8145V5", "Huawei"),
            ("EG8145X6", "Huawei"), 
            ("G-1425G-B", "Nokia"),
            ("G-140W-C", "Nokia"),
            ("HG8145V5", "TP-Link")
        ]
        
        # Gerar dados para os últimos 30 dias
        with open('data/modem-data.csv', 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['Data', 'Modelo', 'Fabricante', 'Quantidade', 'Observacoes', 'Tempo_Gravacao_Min'])
            
            for i in range(30):
                # Calcular data
                date_obj = datetime.date.today() - datetime.timedelta(days=i)
                date_str = date_obj.strftime('%Y-%m-%d')
                
                # Selecionar modelo baseado no índice
                model, manufacturer = models[i % len(models)]
                
                # Gerar valores variados mas determinísticos
                quantity = 10 + (i % 15)
                time_min = 3 + (i % 5)
                
                # Adicionar observações ocasionais
                observations = "Lote prioritário" if i % 4 == 0 else ""
                
                writer.writerow([date_str, model, manufacturer, quantity, observations, time_min])
        
        print("✅ Dados CSV gerados com sucesso")
        EOF
        
        # Contar registros e calcular tamanho
        record_count=$(tail -n +2 data/modem-data.csv | wc -l)
        file_size=$(wc -c < data/modem-data.csv)
        
        # Criar metadata com informações completas
        timestamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        cat > data/metadata.json << EOF
        {
          "lastUpdate": "$timestamp",
          "recordCount": $record_count,
          "fileSize": $file_size,
          "version": "6.0-fixed",
          "source": "Ubuntu Latest - Python Generation",
          "gitSha": "${{ github.sha }}",
          "workflow": "Fixed Exit Code 1 Issues"
        }
        EOF
        
        # Definir outputs
        echo "records-count=$record_count" >> $GITHUB_OUTPUT
        echo "file-size=$file_size" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        
        echo "✅ Dados gerados: $record_count registros ($file_size bytes)"
    
    - name: 💾 Commit and push changes
      run: |
        # Configurar git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Verificar se há mudanças
        if git diff --quiet data/ 2>/dev/null; then
          echo "📋 Nenhuma mudança detectada nos dados"
        else
          echo "📝 Detectadas mudanças, fazendo commit..."
          
          # Adicionar e fazer commit
          git add data/
          git commit -m "📊 Dados atualizados automaticamente - $(date -u '+%Y-%m-%d %H:%M:%S UTC') [skip ci]"
          
          # Push usando o token automático
          git push
          
          echo "✅ Dados sincronizados com sucesso"
        fi
    
    - name: 📋 Summary
      run: |
        {
          echo "## 📊 Resumo da Execução (Exit Code 1 Fixed)"
          echo "- **Registros processados:** ${{ steps.export.outputs.records-count }}"
          echo "- **Tamanho do arquivo:** ${{ steps.export.outputs.file-size }} bytes"
          echo "- **Status:** ✅ Sucesso"
          echo "- **Método:** Ubuntu Latest + Python para portabilidade"
          echo "- **Correção:** Removido Alpine Container, usado Python para geração de dados"
          echo "- **Token:** GITHUB_TOKEN automático"
          echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo ""
          echo "### 🔧 Correções Aplicadas:"
          echo "- ✅ Removido container Alpine (causa de incompatibilidades)"
          echo "- ✅ Usado Python para geração de dados (mais portável)"
          echo "- ✅ Simplificado comandos shell"
          echo "- ✅ Melhorado tratamento de erros"
        } >> $GITHUB_STEP_SUMMARY 