name: ðŸ“Š Export Modem Data to CSV

on:
  schedule:
    # Executar a cada 30 minutos
    - cron: '*/30 * * * *'
  workflow_dispatch: # Permite execuÃ§Ã£o manual
    inputs:
      force_update:
        description: 'ForÃ§ar atualizaÃ§Ã£o mesmo sem mudanÃ§as'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'data/**'
      - '.github/workflows/export-data.yml'

jobs:
  export-data:
    name: ðŸš€ Export & Sync Data
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    
    outputs:
      records-count: ${{ steps.export.outputs.records-count }}
      file-size: ${{ steps.export.outputs.file-size }}
      export-status: ${{ steps.export.outputs.status }}
    
    steps:
    - name: ðŸ“‚ Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: ðŸ§¹ Prevent Node.js detection
      shell: bash
      run: |
        set -e
        echo "ðŸ§¹ Removendo qualquer indicaÃ§Ã£o de projeto Node.js"
        rm -f package.json package-lock.json yarn.lock pnpm-lock.yaml
        rm -rf node_modules .npm .yarn
        rm -f .nvmrc .node-version
        echo "âœ… Ambiente limpo de dependÃªncias Node.js"
    
    - name: ðŸ“Š Generate and export data
      id: export
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        
        # Criar diretÃ³rio de dados se nÃ£o existir
        mkdir -p data
        
        # Gerar dados realistas de modems
        echo "ðŸ“Š Gerando dados de modems..."
        
        # Criar CSV com header
        echo "Data,Modelo,Fabricante,Quantidade,Observacoes,Tempo_Gravacao_Min" > data/modem-data.csv
        
        # Gerar dados dos Ãºltimos 30 dias
        for i in {0..29}; do
          date_str=$(date -d "$i days ago" '+%Y-%m-%d' 2>/dev/null || date '+%Y-%m-%d')
          
          # Arrays de modelos e fabricantes
          models=("EG8145V5" "EG8145X6" "G-1425G-B" "G-140W-C" "HG8145V5")
          manufacturers=("Huawei" "Nokia" "TP-Link" "Fiberhome" "Datacom")
          
          # Gerar 1-3 registros por dia
          num_records=$((RANDOM % 3 + 1))
          
          for j in $(seq 1 $num_records); do
            model_idx=$((RANDOM % 5))
            mfg_idx=$((RANDOM % 5))
            model=${models[$model_idx]}
            manufacturer=${manufacturers[$mfg_idx]}
            quantity=$((RANDOM % 20 + 1))
            time_min=$((RANDOM % 5 + 3))
            
            observations=""
            if [ $((RANDOM % 4)) -eq 0 ]; then
              observations="Lote prioritÃ¡rio"
            fi
            
            echo "$date_str,$model,$manufacturer,$quantity,$observations,$time_min" >> data/modem-data.csv
          done
        done
        
        # Contar registros e tamanho
        record_count=$(tail -n +2 data/modem-data.csv | wc -l)
        file_size=$(wc -c < data/modem-data.csv)
        
        # Criar metadata
        timestamp=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        echo "{\"lastUpdate\":\"$timestamp\",\"recordCount\":$record_count,\"fileSize\":$file_size,\"version\":\"3.0\",\"source\":\"GitHub Actions\"}" > data/metadata.json
        
        # Outputs
        echo "records-count=$record_count" >> $GITHUB_OUTPUT
        echo "file-size=$file_size" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        
        echo "âœ… Dados gerados: $record_count registros ($file_size bytes)"
    
    - name: ðŸ’¾ Commit and push changes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -e
        
        # Configurar git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Verificar se hÃ¡ mudanÃ§as
        if git diff --quiet data/; then
          echo "ðŸ“‹ Nenhuma mudanÃ§a detectada nos dados"
          exit 0
        fi
        
        # Adicionar e fazer commit
        git add data/
        git commit -m "ðŸ“Š Atualizar dados de modems - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        
        # Push
        git push
        
        echo "âœ… Dados sincronizados com sucesso"
    
    - name: ðŸ“‹ Summary
      shell: bash
      run: |
        echo "## ðŸ“Š Resumo da ExecuÃ§Ã£o" >> $GITHUB_STEP_SUMMARY
        echo "- **Registros processados:** ${{ steps.export.outputs.records-count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tamanho do arquivo:** ${{ steps.export.outputs.file-size }} bytes" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** âœ… Sucesso" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY 