name: Export Modem Data to CSV

on:
  schedule:
    # Executar a cada 15 minutos
    - cron: '*/15 * * * *'
    # Executar diariamente Ã s 9h
    - cron: '0 9 * * *'
  workflow_dispatch: # Permite execuÃ§Ã£o manual
  push:
    branches: [ main ]

jobs:
  export-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Create data export script
      run: |
        cat > export-data.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        
        // Simular dados do sistema (em produÃ§Ã£o, viria de uma API)
        const sampleData = [
          {
            id: 1,
            data: new Date().toISOString().split('T')[0],
            modelo: "Huawei EG8145V5",
            fabricante: "Huawei",
            quantidade: 10,
            observacoes: "Teste automÃ¡tico GitHub Actions",
            timestamp: new Date().toISOString()
          },
          {
            id: 2,
            data: new Date().toISOString().split('T')[0],
            modelo: "Nokia G-1425G-B",
            fabricante: "Nokia",
            quantidade: 5,
            observacoes: "ExportaÃ§Ã£o automÃ¡tica",
            timestamp: new Date().toISOString()
          },
          {
            id: 3,
            data: new Date().toISOString().split('T')[0],
            modelo: "Huawei EG8145X6",
            fabricante: "Huawei",
            quantidade: 8,
            observacoes: "Sistema funcionando",
            timestamp: new Date().toISOString()
          }
        ];
        
        // Converter para CSV
        function arrayToCSV(data) {
          if (!data.length) return '';
          
          const headers = Object.keys(data[0]);
          const csvHeaders = headers.join(',');
          
          const csvRows = data.map(row => 
            headers.map(header => {
              const value = row[header];
              // Escapar vÃ­rgulas e aspas
              if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                return `"${value.replace(/"/g, '""')}"`;
              }
              return value;
            }).join(',')
          );
          
          return [csvHeaders, ...csvRows].join('\n');
        }
        
        // Criar CSV
        const csvContent = arrayToCSV(sampleData);
        
        // Salvar arquivo
        fs.writeFileSync('data/modem-data.csv', csvContent);
        
        // Criar metadata
        const metadata = {
          lastUpdate: new Date().toISOString(),
          recordCount: sampleData.length,
          version: '1.0',
          source: 'GitHub Actions',
          nextUpdate: new Date(Date.now() + 15 * 60 * 1000).toISOString()
        };
        
        fs.writeFileSync('data/metadata.json', JSON.stringify(metadata, null, 2));
        
        console.log('âœ… Dados exportados com sucesso!');
        console.log(`ðŸ“Š ${sampleData.length} registros processados`);
        console.log(`ðŸ“… PrÃ³xima atualizaÃ§Ã£o: ${metadata.nextUpdate}`);
        EOF
        
    - name: Create data directory
      run: mkdir -p data
      
    - name: Run export script
      run: node export-data.js
      
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        git diff --staged --quiet || git commit -m "ðŸ”„ AtualizaÃ§Ã£o automÃ¡tica de dados - $(date '+%Y-%m-%d %H:%M:%S')"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 