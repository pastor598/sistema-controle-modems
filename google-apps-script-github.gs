/**
 * GOOGLE APPS SCRIPT - INTEGRA√á√ÉO COM GITHUB
 * L√™ dados automaticamente do reposit√≥rio GitHub
 */

let SPREADSHEET_ID = '';
const GITHUB_BASE_URL = 'https://raw.githubusercontent.com/pastor598/sistema-controle-modems/main/data/';
const CSV_URL = GITHUB_BASE_URL + 'modem-data.csv';
const METADATA_URL = GITHUB_BASE_URL + 'metadata.json';

// Fun√ß√£o de setup - execute UMA VEZ
function setup() {
  try {
    const spreadsheet = SpreadsheetApp.create('ModemControl Pro - GitHub Integration');
    SPREADSHEET_ID = spreadsheet.getId();
    
    const sheet = spreadsheet.getActiveSheet();
    sheet.setName('Dados GitHub');
    
    Logger.log('‚úÖ Setup GitHub Integration conclu√≠do! ID: ' + SPREADSHEET_ID);
    Logger.log('üîó URL: ' + spreadsheet.getUrl());
    
    // Executar primeira importa√ß√£o
    importFromGitHub();
    
    return { success: true, spreadsheetId: SPREADSHEET_ID, url: spreadsheet.getUrl() };
  } catch (error) {
    Logger.log('‚ùå Erro no setup: ' + error.toString());
    return { success: false, error: error.toString() };
  }
}

// FUN√á√ÉO PRINCIPAL - Importar dados do GitHub
function importFromGitHub() {
  try {
    Logger.log('üîÑ Importando dados do GitHub...');
    Logger.log('üìã URL CSV: ' + CSV_URL);
    
    if (!SPREADSHEET_ID) {
      findSpreadsheet();
    }
    
    // Buscar dados CSV do GitHub
    const csvResponse = UrlFetchApp.fetch(CSV_URL);
    const csvText = csvResponse.getContentText();
    
    if (!csvText) {
      throw new Error('CSV vazio ou n√£o encontrado');
    }
    
    // Buscar metadata (opcional)
    let metadata = null;
    try {
      const metadataResponse = UrlFetchApp.fetch(METADATA_URL);
      metadata = JSON.parse(metadataResponse.getContentText());
      Logger.log('üìä Metadata: ' + JSON.stringify(metadata));
    } catch (e) {
      Logger.log('‚ö†Ô∏è Metadata n√£o encontrada, continuando...');
    }
    
    // Processar CSV
    const csvData = Utilities.parseCsv(csvText);
    
    if (csvData.length === 0) {
      throw new Error('CSV n√£o cont√©m dados');
    }
    
    // Abrir planilha
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName('Dados GitHub');
    
    // Limpar dados antigos
    sheet.clear();
    
    // Inserir dados
    for (let i = 0; i < csvData.length; i++) {
      sheet.getRange(i + 1, 1, 1, csvData[i].length).setValues([csvData[i]]);
    }
    
    // Formatar cabe√ßalhos
    if (csvData.length > 0) {
      const headerRange = sheet.getRange(1, 1, 1, csvData[0].length);
      headerRange.setFontWeight('bold');
      headerRange.setBackground('#4CAF50');
      headerRange.setFontColor('white');
    }
    
    // Adicionar informa√ß√µes de atualiza√ß√£o
    const lastRow = sheet.getLastRow();
    sheet.getRange(lastRow + 2, 1).setValue('√öltima Atualiza√ß√£o:');
    sheet.getRange(lastRow + 2, 2).setValue(new Date());
    
    if (metadata) {
      sheet.getRange(lastRow + 3, 1).setValue('Registros GitHub:');
      sheet.getRange(lastRow + 3, 2).setValue(metadata.recordCount || 'N/A');
      
      sheet.getRange(lastRow + 4, 1).setValue('Vers√£o:');
      sheet.getRange(lastRow + 4, 2).setValue(metadata.version || 'N/A');
    }
    
    Logger.log('‚úÖ Importa√ß√£o conclu√≠da!');
    Logger.log(`üìä ${csvData.length} linhas importadas`);
    
    return {
      success: true,
      message: `Dados importados: ${csvData.length} linhas`,
      timestamp: new Date().toISOString(),
      metadata: metadata
    };
    
  } catch (error) {
    Logger.log('‚ùå Erro na importa√ß√£o: ' + error.toString());
    return {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    };
  }
}

// Configurar triggers autom√°ticos para GitHub
function setupGitHubTriggers() {
  try {
    Logger.log('üîß Configurando triggers para GitHub...');
    
    // Remover triggers existentes
    deleteAllTriggers();
    
    // Trigger 1: Importa√ß√£o a cada 30 minutos
    ScriptApp.newTrigger('importFromGitHub')
      .timeBased()
      .everyMinutes(30)
      .create();
    
    // Trigger 2: Importa√ß√£o di√°ria √†s 8h
    ScriptApp.newTrigger('importFromGitHub')
      .timeBased()
      .everyDays(1)
      .atHour(8)
      .create();
    
    Logger.log('‚úÖ Triggers GitHub configurados!');
    Logger.log('üìÖ Importa√ß√£o: a cada 30 minutos');
    Logger.log('üìÖ Importa√ß√£o di√°ria: 8h');
    
    return { success: true, message: 'Triggers GitHub configurados!' };
    
  } catch (error) {
    Logger.log('‚ùå Erro ao configurar triggers: ' + error.toString());
    return { success: false, error: error.toString() };
  }
}

// Fun√ß√£o para testar conectividade com GitHub
function testGitHubConnection() {
  try {
    Logger.log('üîç Testando conex√£o com GitHub...');
    
    // Testar CSV
    const csvResponse = UrlFetchApp.fetch(CSV_URL);
    const csvStatus = csvResponse.getResponseCode();
    Logger.log('üìÑ CSV Status: ' + csvStatus);
    
    // Testar Metadata
    let metadataStatus = 'N/A';
    try {
      const metadataResponse = UrlFetchApp.fetch(METADATA_URL);
      metadataStatus = metadataResponse.getResponseCode();
    } catch (e) {
      metadataStatus = 'N√£o encontrado';
    }
    Logger.log('üìä Metadata Status: ' + metadataStatus);
    
    const result = {
      success: csvStatus === 200,
      csvStatus: csvStatus,
      metadataStatus: metadataStatus,
      csvUrl: CSV_URL,
      metadataUrl: METADATA_URL,
      timestamp: new Date().toISOString()
    };
    
    Logger.log('‚úÖ Teste conclu√≠do: ' + JSON.stringify(result));
    return result;
    
  } catch (error) {
    Logger.log('‚ùå Erro no teste: ' + error.toString());
    return {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    };
  }
}

// Fun√ß√µes auxiliares
function findSpreadsheet() {
  const files = DriveApp.getFilesByName('ModemControl Pro - GitHub Integration');
  if (files.hasNext()) {
    SPREADSHEET_ID = files.next().getId();
    Logger.log('üìä Planilha encontrada: ' + SPREADSHEET_ID);
  } else {
    throw new Error('Planilha n√£o encontrada. Execute setup() primeiro.');
  }
}

function deleteAllTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
  Logger.log('üóëÔ∏è ' + triggers.length + ' triggers removidos');
}

// Fun√ß√£o para importa√ß√£o manual via webhook
function doGet(e) {
  Logger.log('üì• GET recebido - Importa√ß√£o manual');
  
  const result = importFromGitHub();
  
  return ContentService
    .createTextOutput(JSON.stringify(result))
    .setMimeType(ContentService.MimeType.JSON);
}

// Fun√ß√£o para receber webhooks do GitHub
function doPost(e) {
  Logger.log('üì• POST recebido - Webhook GitHub');
  
  try {
    // Processar webhook do GitHub (opcional)
    let webhookData = null;
    if (e.postData && e.postData.contents) {
      webhookData = JSON.parse(e.postData.contents);
      Logger.log('üîó Webhook: ' + JSON.stringify(webhookData));
    }
    
    // Executar importa√ß√£o
    const result = importFromGitHub();
    
    return ContentService
      .createTextOutput(JSON.stringify(result))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    Logger.log('‚ùå Erro no webhook: ' + error.toString());
    
    const errorResult = {
      success: false,
      error: error.toString(),
      timestamp: new Date().toISOString()
    };
    
    return ContentService
      .createTextOutput(JSON.stringify(errorResult))
      .setMimeType(ContentService.MimeType.JSON);
  }
} 